
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "spacetime"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('spacetime')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ST-class")
> ### * ST-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ST-class
> ### Title: Class "ST"
> ### Aliases: ST-class xts-class zoo-class ST dim.ST
> ###   [[<-,ST,ANY,missing-method [[,ST,ANY,missing-method $<-,ST-method
> ###   $,ST-method cbind.ST is.projected,ST-method proj4string,ST-method
> ###   proj4string<-,ST,CRS-method proj4string<-,ST,character-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> time = as.Date('2008-01-01')+1:2
> library(sp)
> sp = SpatialPoints(cbind(c(0,1),c(0,1)))
> ST(sp, time, delta(time))
An object of class "ST"
Slot "sp":
SpatialPoints:
     coords.x1 coords.x2
[1,]         0         0
[2,]         1         1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
           timeIndex
2008-01-02         1
2008-01-03         2

Slot "endTime":
[1] "2008-01-03 UTC" "2008-01-04 UTC"

> 
> 
> 
> cleanEx()

detaching ‘package:sp’

> nameEx("STFDF-class")
> ### * STFDF-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: STFDF-class
> ### Title: Class "STFDF"
> ### Aliases: STFDF-class STF-class STFDF STF as.data.frame.STF
> ###   [,STFDF-method coerce,STFDF,xts-method coerce,STFDF,Spatial-method
> ###   plot,STF,missing-method plot,STFDF,missing-method na.omit.STFDF
> ###   rbind.STFDF as.zoo as.zoo.STFDF
> ### Keywords: classes
> 
> ### ** Examples
> 
> sp = cbind(x = c(0,0,1), y = c(0,1,1))
> row.names(sp) = paste("point", 1:nrow(sp), sep="")
> library(sp)
> sp = SpatialPoints(sp)
> time = as.POSIXct("2010-08-05")+3600*(10:13)
> m = c(10,20,30) # means for each of the 3 point locations
> mydata = rnorm(length(sp)*length(time),mean=rep(m, 4))
> IDs = paste("ID",1:length(mydata))
> mydata = data.frame(values = signif(mydata,3), ID=IDs)
> stfdf = STFDF(sp, time, mydata)
> stfdf
An object of class "STFDF"
Slot "data":
   values    ID
1    9.37  ID 1
2   20.20  ID 2
3   29.20  ID 3
4   11.60  ID 4
5   20.30  ID 5
6   29.20  ID 6
7   10.50  ID 7
8   20.70  ID 8
9   30.60  ID 9
10   9.69 ID 10
11  21.50 ID 11
12  30.40 ID 12

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
point3 1 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    timeIndex
2010-08-05 10:00:00         1
2010-08-05 11:00:00         2
2010-08-05 12:00:00         3
2010-08-05 13:00:00         4

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"
[3] "2010-08-05 13:00:00 CEST" "2010-08-05 14:00:00 CEST"

> stfdf[1:2,]
An object of class "STFDF"
Slot "data":
  values    ID
1   9.37  ID 1
2  20.20  ID 2
3  11.60  ID 4
4  20.30  ID 5
5  10.50  ID 7
6  20.70  ID 8
7   9.69 ID 10
8  21.50 ID 11

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    timeIndex
2010-08-05 10:00:00         1
2010-08-05 11:00:00         2
2010-08-05 12:00:00         3
2010-08-05 13:00:00         4

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"
[3] "2010-08-05 13:00:00 CEST" "2010-08-05 14:00:00 CEST"

> stfdf[,1:2]
An object of class "STFDF"
Slot "data":
  values   ID
1   9.37 ID 1
2  20.20 ID 2
3  29.20 ID 3
4  11.60 ID 4
5  20.30 ID 5
6  29.20 ID 6

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
point3 1 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    timeIndex
2010-08-05 10:00:00         1
2010-08-05 11:00:00         2

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"

> stfdf[,,2]
An object of class "STFDF"
Slot "data":
      ID
1   ID 1
2   ID 2
3   ID 3
4   ID 4
5   ID 5
6   ID 6
7   ID 7
8   ID 8
9   ID 9
10 ID 10
11 ID 11
12 ID 12

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
point3 1 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    timeIndex
2010-08-05 10:00:00         1
2010-08-05 11:00:00         2
2010-08-05 12:00:00         3
2010-08-05 13:00:00         4

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"
[3] "2010-08-05 13:00:00 CEST" "2010-08-05 14:00:00 CEST"

> stfdf[,,"values"]
An object of class "STFDF"
Slot "data":
   values
1    9.37
2   20.20
3   29.20
4   11.60
5   20.30
6   29.20
7   10.50
8   20.70
9   30.60
10   9.69
11  21.50
12  30.40

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
point3 1 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    timeIndex
2010-08-05 10:00:00         1
2010-08-05 11:00:00         2
2010-08-05 12:00:00         3
2010-08-05 13:00:00         4

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"
[3] "2010-08-05 13:00:00 CEST" "2010-08-05 14:00:00 CEST"

> stfdf[1,]
                    values  ID     
2010-08-05 10:00:00 " 9.37" "ID 1" 
2010-08-05 11:00:00 "11.60" "ID 4" 
2010-08-05 12:00:00 "10.50" "ID 7" 
2010-08-05 13:00:00 " 9.69" "ID 10"
> stfdf[,2]
  coordinates values   ID
1      (0, 0)   11.6 ID 4
2      (0, 1)   20.3 ID 5
3      (1, 1)   29.2 ID 6
> as(stfdf[,,1], "xts")
                    point1 point2 point3
2010-08-05 10:00:00   9.37   20.2   29.2
2010-08-05 11:00:00  11.60   20.3   29.2
2010-08-05 12:00:00  10.50   20.7   30.6
2010-08-05 13:00:00   9.69   21.5   30.4
> as(stfdf[,,2], "xts")
                    point1  point2  point3 
2010-08-05 10:00:00 "ID 1"  "ID 2"  "ID 3" 
2010-08-05 11:00:00 "ID 4"  "ID 5"  "ID 6" 
2010-08-05 12:00:00 "ID 7"  "ID 8"  "ID 9" 
2010-08-05 13:00:00 "ID 10" "ID 11" "ID 12"
> # examples for [[, [[<-, $ and $<- 
> stfdf[[1]]
 [1]  9.37 20.20 29.20 11.60 20.30 29.20 10.50 20.70 30.60  9.69 21.50 30.40
> stfdf[["values"]]
 [1]  9.37 20.20 29.20 11.60 20.30 29.20 10.50 20.70 30.60  9.69 21.50 30.40
> stfdf[["newVal"]] <- rnorm(12)
> stfdf$ID
 [1] ID 1  ID 2  ID 3  ID 4  ID 5  ID 6  ID 7  ID 8  ID 9  ID 10 ID 11 ID 12
Levels: ID 1 ID 10 ID 11 ID 12 ID 2 ID 3 ID 4 ID 5 ID 6 ID 7 ID 8 ID 9
> stfdf$ID = paste("OldIDs", 1:12, sep="")
> stfdf$NewID = paste("NewIDs", 12:1, sep="")
> stfdf
An object of class "STFDF"
Slot "data":
   values       ID      newVal    NewID
1    9.37  OldIDs1 -0.62124058 NewIDs12
2   20.20  OldIDs2 -2.21469989 NewIDs11
3   29.20  OldIDs3  1.12493092 NewIDs10
4   11.60  OldIDs4 -0.04493361  NewIDs9
5   20.30  OldIDs5 -0.01619026  NewIDs8
6   29.20  OldIDs6  0.94383621  NewIDs7
7   10.50  OldIDs7  0.82122120  NewIDs6
8   20.70  OldIDs8  0.59390132  NewIDs5
9   30.60  OldIDs9  0.91897737  NewIDs4
10   9.69 OldIDs10  0.78213630  NewIDs3
11  21.50 OldIDs11  0.07456498  NewIDs2
12  30.40 OldIDs12 -1.98935170  NewIDs1

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
point3 1 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    timeIndex
2010-08-05 10:00:00         1
2010-08-05 11:00:00         2
2010-08-05 12:00:00         3
2010-08-05 13:00:00         4

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"
[3] "2010-08-05 13:00:00 CEST" "2010-08-05 14:00:00 CEST"

> 
> 
> 
> cleanEx()

detaching ‘package:sp’

> nameEx("STSDF-class")
> ### * STSDF-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: STSDF-class
> ### Title: Class "STSDF"
> ### Aliases: STSDF-class STS-class STSDF STS as.data.frame.STSDF
> ###   as.data.frame.STS [,STSDF-method coerce,STSDF,STFDF-method
> ###   coerce,STSDF,STIDF-method plot,STS,missing-method
> ###   plot,STSDF,missing-method rbind.STSDF
> ### Keywords: classes
> 
> ### ** Examples
> 
> sp = cbind(x = c(0,0,1), y = c(0,1,1))
> row.names(sp) = paste("point", 1:nrow(sp), sep="")
> library(sp)
> sp = SpatialPoints(sp)
> library(xts)
Loading required package: zoo

Attaching package: ‘zoo’

The following object is masked from ‘package:base’:

    as.Date, as.Date.numeric

> time = xts(1:4, as.POSIXct("2010-08-05")+3600*(10:13))
> m = c(10,20,30) # means for each of the 3 point locations
> mydata = rnorm(length(sp)*length(time),mean=rep(m, 4))
> IDs = paste("ID",1:length(mydata))
> mydata = data.frame(values = signif(mydata,3), ID=IDs)
> stfdf = STFDF(sp, time, mydata)
> stfdf
An object of class "STFDF"
Slot "data":
   values    ID
1    9.37  ID 1
2   20.20  ID 2
3   29.20  ID 3
4   11.60  ID 4
5   20.30  ID 5
6   29.20  ID 6
7   10.50  ID 7
8   20.70  ID 8
9   30.60  ID 9
10   9.69 ID 10
11  21.50 ID 11
12  30.40 ID 12

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
point3 1 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    [,1]
2010-08-05 10:00:00    1
2010-08-05 11:00:00    2
2010-08-05 12:00:00    3
2010-08-05 13:00:00    4

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"
[3] "2010-08-05 13:00:00 CEST" "2010-08-05 14:00:00 CEST"

> stsdf = as(stfdf, "STSDF")
> stsdf[1:2,]
An object of class "STSDF"
Slot "data":
   values    ID
1    9.37  ID 1
2   20.20  ID 2
4   11.60  ID 4
5   20.30  ID 5
7   10.50  ID 7
8   20.70  ID 8
10   9.69 ID 10
11  21.50 ID 11

Slot "index":
     [,1] [,2]
[1,]    1    1
[2,]    2    1
[3,]    1    2
[4,]    2    2
[5,]    1    3
[6,]    2    3
[7,]    1    4
[8,]    2    4

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    [,1]
2010-08-05 10:00:00    1
2010-08-05 11:00:00    2
2010-08-05 12:00:00    3
2010-08-05 13:00:00    4

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"
[3] "2010-08-05 13:00:00 CEST" "2010-08-05 14:00:00 CEST"

> stsdf[,1:2]
An object of class "STSDF"
Slot "data":
  values   ID
1   9.37 ID 1
2  20.20 ID 2
3  29.20 ID 3
4  11.60 ID 4
5  20.30 ID 5
6  29.20 ID 6

Slot "index":
     [,1] [,2]
[1,]    1    1
[2,]    2    1
[3,]    3    1
[4,]    1    2
[5,]    2    2
[6,]    3    2

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
point3 1 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    [,1]
2010-08-05 10:00:00    1
2010-08-05 11:00:00    2

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"

> stsdf[,,2]
An object of class "STSDF"
Slot "data":
      ID
1   ID 1
2   ID 2
3   ID 3
4   ID 4
5   ID 5
6   ID 6
7   ID 7
8   ID 8
9   ID 9
10 ID 10
11 ID 11
12 ID 12

Slot "index":
      [,1] [,2]
 [1,]    1    1
 [2,]    2    1
 [3,]    3    1
 [4,]    1    2
 [5,]    2    2
 [6,]    3    2
 [7,]    1    3
 [8,]    2    3
 [9,]    3    3
[10,]    1    4
[11,]    2    4
[12,]    3    4

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
point3 1 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    [,1]
2010-08-05 10:00:00    1
2010-08-05 11:00:00    2
2010-08-05 12:00:00    3
2010-08-05 13:00:00    4

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"
[3] "2010-08-05 13:00:00 CEST" "2010-08-05 14:00:00 CEST"

> stsdf[,,"values"]
An object of class "STSDF"
Slot "data":
   values
1    9.37
2   20.20
3   29.20
4   11.60
5   20.30
6   29.20
7   10.50
8   20.70
9   30.60
10   9.69
11  21.50
12  30.40

Slot "index":
      [,1] [,2]
 [1,]    1    1
 [2,]    2    1
 [3,]    3    1
 [4,]    1    2
 [5,]    2    2
 [6,]    3    2
 [7,]    1    3
 [8,]    2    3
 [9,]    3    3
[10,]    1    4
[11,]    2    4
[12,]    3    4

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
point3 1 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    [,1]
2010-08-05 10:00:00    1
2010-08-05 11:00:00    2
2010-08-05 12:00:00    3
2010-08-05 13:00:00    4

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"
[3] "2010-08-05 13:00:00 CEST" "2010-08-05 14:00:00 CEST"

> stsdf[1,]
                    values  ID     
2010-08-05 10:00:00 " 9.37" "ID 1" 
2010-08-05 11:00:00 "11.60" "ID 4" 
2010-08-05 12:00:00 "10.50" "ID 7" 
2010-08-05 13:00:00 " 9.69" "ID 10"
> stsdf[,2]
  coordinates values   ID
4      (0, 0)   11.6 ID 4
5      (0, 1)   20.3 ID 5
6      (1, 1)   29.2 ID 6
> # examples for [[, [[<-, $ and $<- 
> stsdf[[1]]
 [1]  9.37 20.20 29.20 11.60 20.30 29.20 10.50 20.70 30.60  9.69 21.50 30.40
> stsdf[["values"]]
 [1]  9.37 20.20 29.20 11.60 20.30 29.20 10.50 20.70 30.60  9.69 21.50 30.40
> stsdf[["newVal"]] <- rnorm(12)
> stsdf$ID
 [1] ID 1  ID 2  ID 3  ID 4  ID 5  ID 6  ID 7  ID 8  ID 9  ID 10 ID 11 ID 12
Levels: ID 1 ID 10 ID 11 ID 12 ID 2 ID 3 ID 4 ID 5 ID 6 ID 7 ID 8 ID 9
> stsdf$ID = paste("OldIDs", 1:12, sep="")
> stsdf$NewID = paste("NewIDs", 12:1, sep="")
> stsdf
An object of class "STSDF"
Slot "data":
   values       ID      newVal    NewID
1    9.37  OldIDs1 -0.62124058 NewIDs12
2   20.20  OldIDs2 -2.21469989 NewIDs11
3   29.20  OldIDs3  1.12493092 NewIDs10
4   11.60  OldIDs4 -0.04493361  NewIDs9
5   20.30  OldIDs5 -0.01619026  NewIDs8
6   29.20  OldIDs6  0.94383621  NewIDs7
7   10.50  OldIDs7  0.82122120  NewIDs6
8   20.70  OldIDs8  0.59390132  NewIDs5
9   30.60  OldIDs9  0.91897737  NewIDs4
10   9.69 OldIDs10  0.78213630  NewIDs3
11  21.50 OldIDs11  0.07456498  NewIDs2
12  30.40 OldIDs12 -1.98935170  NewIDs1

Slot "index":
      [,1] [,2]
 [1,]    1    1
 [2,]    2    1
 [3,]    3    1
 [4,]    1    2
 [5,]    2    2
 [6,]    3    2
 [7,]    1    3
 [8,]    2    3
 [9,]    3    3
[10,]    1    4
[11,]    2    4
[12,]    3    4

Slot "sp":
SpatialPoints:
       x y
point1 0 0
point2 0 1
point3 1 1
Coordinate Reference System (CRS) arguments: NA 

Slot "time":
                    [,1]
2010-08-05 10:00:00    1
2010-08-05 11:00:00    2
2010-08-05 12:00:00    3
2010-08-05 13:00:00    4

Slot "endTime":
[1] "2010-08-05 11:00:00 CEST" "2010-08-05 12:00:00 CEST"
[3] "2010-08-05 13:00:00 CEST" "2010-08-05 14:00:00 CEST"

> 
> 
> 
> cleanEx()

detaching ‘package:xts’, ‘package:zoo’, ‘package:sp’

> nameEx("STTDF-class")
> ### * STTDF-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: STTDF-class
> ### Title: Class "STTDF"
> ### Aliases: STT-class STTDF-class STT STTDF ltraj-class
> ###   coerce,STTDF,ltraj-method coerce,ltraj,STTDF-method [,STT-method
> ###   [,STTDF-method plot,STT,missing-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> library(sp)
> m = 3# nr of trajectories
> n = 100 # length of each
> l = vector("list", m)
> t0 = as.POSIXct("2013-05-05",tz="GMT")
> set.seed(1331) # fix randomness
> for (i in 1:m) {
+     x = cumsum(rnorm(n))
+     y = cumsum(rnorm(n))
+     sp = SpatialPoints(cbind(x,y))
+     #t = t0 + (0:(n-1) + (i-1)*n) * 60
+     t = t0 + (0:(n-1) + (i-1)*n/2) * 60
+     l[[i]] = STI(sp, t)
+ }
> stt= STT(l)
> sttdf = STTDF(stt, data.frame(attr = rnorm(n*m), id = paste("ID", rep(1:m, each=n))))
> x = as(stt, "STI")
> stplot(sttdf, col=1:m, scales=list(draw=TRUE))
> stplot(sttdf, by = "id")
> stplot(sttdf[1])
> stplot(sttdf[1])
> 
> # select a trajectory that intersect with a polygon
> p = Polygon(cbind(x=c(-20,-15,-15,-20,-20),y=c(10,10,15,15,10)))
> pol=SpatialPolygons(list(Polygons(list(p), "ID")))
> stplot(sttdf[pol])
> names(sttdf[pol]@traj)
[1] "3"
> stplot(sttdf[1:2],col=1:2)
> stplot(sttdf[,t0])
> stplot(sttdf[,"2013"])
> stplot(sttdf[pol,"2013"])
> is.null(sttdf[pol,t0])
[1] TRUE
> 
> 
> 
> cleanEx()

detaching ‘package:sp’

> nameEx("air")
> ### * air
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: air
> ### Title: Air quality data, rural background PM10 in Germany, daily
> ###   averages 1998-2009
> ### Aliases: air DE_NUTS1 rural
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(air)
> 
> 
> 
> cleanEx()
> nameEx("delta")
> ### * delta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delta
> ### Title: find default time interval end points when intervals are regular
> ### Aliases: delta
> ### Keywords: manip
> 
> ### ** Examples
> 
> x = as.POSIXct("2000-01-01") + (0:9) * 3600
> delta(x)
 [1] "2000-01-01 01:00:00 CET" "2000-01-01 02:00:00 CET"
 [3] "2000-01-01 03:00:00 CET" "2000-01-01 04:00:00 CET"
 [5] "2000-01-01 05:00:00 CET" "2000-01-01 06:00:00 CET"
 [7] "2000-01-01 07:00:00 CET" "2000-01-01 08:00:00 CET"
 [9] "2000-01-01 09:00:00 CET" "2000-01-01 10:00:00 CET"
> 
> 
> 
> cleanEx()
> nameEx("eof")
> ### * eof
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EOF
> ### Title: Compute spatial or temporal empirical orthogonal function (EOF)
> ### Aliases: EOF
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> if (require(gstat)) {
+ data(wind)
+ library(sp)
+ wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))
+ wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))
+ coordinates(wind.loc) = ~x+y
+ proj4string(wind.loc) = "+proj=longlat +datum=WGS84"
+ 
+ # match station order to names in wide table:
+ stations = 4:15
+ wind.loc = wind.loc[match(names(wind[stations]), wind.loc$Code),]
+ row.names(wind.loc) = wind.loc$Station
+ wind$time = ISOdate(wind$year+1900, wind$month, wind$day, 0)
+ space = list(values = names(wind)[stations])
+ wind.st = stConstruct(wind[stations], space, wind$time, SpatialObj = wind.loc)
+ # select firt 500 time steps, to limit run time:
+ wind.st = wind.st[,1:500]
+ wind.eof.1 = EOF(wind.st)
+ wind.eof.2 = EOF(wind.st, "temporal")
+ wind.eof.1.PCs = EOF(wind.st, returnPredictions=FALSE)
+ EOF(wind.st, "temporal", returnPredictions=FALSE)
+ summary(EOF(wind.st, returnPredictions=FALSE))
+ summary(EOF(wind.st, "temporal", returnPredictions=FALSE))
+ plot(EOF(wind.st, "temporal", returnPredictions=FALSE))
+ }
Loading required package: gstat
> 
> 
> 
> cleanEx()

detaching ‘package:sp’, ‘package:gstat’

> nameEx("fires")
> ### * fires
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fires
> ### Title: Northern Los Angeles County Fires
> ### Aliases: fires
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(fires)
> fires$X <- fires$X*100000
> fires$Y <- fires$Y*100000
> library(sp)
> coordinates(fires) <- c("X", "Y")
> proj4string(fires) <- CRS("+init=epsg:2229")
> dates <- as.Date("1960-01-01")+(fires$Time-1)
> Fires <- STIDF(as(fires, "SpatialPoints"), dates, data.frame(time=fires$Time))
> if (require(rgdal)) {
+   library(maptools)
+   library(mapdata)
+   m <- map("county", "california", xlim=c(-119.1, -117.5), 
+   	ylim=c(33.7, 35.0), plot=FALSE)
+   cc <- spTransform(map2SpatialLines(m, 
+   	proj4string=CRS("+proj=longlat")), CRS("+init=epsg:2229"))
+   plot(cc, xlim=c(6300000, 6670000), ylim=c(1740000, 2120000))
+   plot(slot(Fires, "sp"), pch=3, add=TRUE)
+   stplot(Fires, sp.layout=list("sp.lines", cc))
+ }
Loading required package: rgdal
rgdal: version: 0.8-11, (SVN revision 479M)
Geospatial Data Abstraction Library extensions to R successfully loaded
Loaded GDAL runtime: GDAL 1.9.2, released 2012/10/08
Path to GDAL shared files: /usr/share/gdal/1.9
Loaded PROJ.4 runtime: Rel. 4.8.0, 6 March 2012, [PJ_VERSION: 480]
Path to PROJ.4 shared files: (autodetected)
Checking rgeos availability: TRUE
Loading required package: maps
> 
> 
> 
> cleanEx()

detaching ‘package:mapdata’, ‘package:maps’, ‘package:maptools’,
  ‘package:rgdal’, ‘package:sp’

> nameEx("na")
> ### * na
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: na.locf
> ### Title: replace NA attribute values; disaggregation time series
> ### Aliases: na.locf na.approx na.spline na.locf.STFDF na.approx.STFDF
> ###   na.spline.STFDF
> ### Keywords: manip
> 
> ### ** Examples
> 
> # toy example:
> library(sp)
> pts = SpatialPoints(cbind(c(0,1),c(0,1)))
> Sys.setenv(TZ="GMT")
> tm = seq(as.POSIXct("2012-11-25"), as.POSIXct("2012-11-30"), "1 day")
> df = data.frame(a = c(NA,NA,2,3,NA,NA,NA,2,NA,NA,4,NA), b = c(NA,2,3,4,5,1,2,NA,NA,NA,NA,3))
> x = STFDF(pts, tm, df)
> as(x, "xts")
           a.1 a.2 b.1 b.2
2012-11-25  NA  NA  NA   2
2012-11-26   2   3   3   4
2012-11-27  NA  NA   5   1
2012-11-28  NA   2   2  NA
2012-11-29  NA  NA  NA  NA
2012-11-30   4  NA  NA   3
> as(na.locf(x), "xts")
           a.1 a.2 b.1 b.2
2012-11-25  NA  NA  NA   2
2012-11-26   2   3   3   4
2012-11-27   2   3   5   1
2012-11-28   2   2   2   1
2012-11-29   2   2   2   1
2012-11-30   4   2   2   3
> as(na.locf(x, fromLast = TRUE), "xts")
           a.1 a.2 b.1 b.2
2012-11-25   2   3   3   2
2012-11-26   2   3   3   4
2012-11-27   4   2   5   1
2012-11-28   4   2   2   3
2012-11-29   4  NA  NA   3
2012-11-30   4  NA  NA   3
> as(na.locf(na.locf(x), fromLast = TRUE), "xts")
           a.1 a.2 b.1 b.2
2012-11-25   2   3   3   2
2012-11-26   2   3   3   4
2012-11-27   2   3   5   1
2012-11-28   2   2   2   1
2012-11-29   2   2   2   1
2012-11-30   4   2   2   3
> # drops first record:
> as(na.approx(x[,,1]), "xts")
             1   2
2012-11-26 2.0 3.0
2012-11-27 2.5 2.5
2012-11-28 3.0 2.0
2012-11-29 3.5  NA
2012-11-30 4.0  NA
> # keep it:
> cbind(as(na.approx(x[,,1], na.rm=FALSE), "xts"),
+ as(na.approx(x[,,2]), "xts"))
            X1  X2 X1.1     X2.1
2012-11-25  NA  NA   NA 2.000000
2012-11-26 2.0 3.0    3 4.000000
2012-11-27 2.5 2.5    5 1.000000
2012-11-28 3.0 2.0    2 1.666667
2012-11-29 3.5  NA   NA 2.333333
2012-11-30 4.0  NA   NA 3.000000
> cbind(as(na.spline(x[,,1]), "xts"),
+ as(na.spline(x[,,2]), "xts"))
            X1  X2 X1.1 X2.1
2012-11-25 1.5 3.5   -4  2.0
2012-11-26 2.0 3.0    3  4.0
2012-11-27 2.5 2.5    5  1.0
2012-11-28 3.0 2.0    2 -2.9
2012-11-29 3.5 1.5   -6 -3.6
2012-11-30 4.0 1.0  -19  3.0
> #disaggregate:
> xout = seq(start(x), end(x), "6 hours")
> as(na.approx(x[,,1], xout = xout), "xts")
                        1     2
2012-11-26 00:00:00 2.000 3.000
2012-11-26 06:00:00 2.125 2.875
2012-11-26 12:00:00 2.250 2.750
2012-11-26 18:00:00 2.375 2.625
2012-11-27 00:00:00 2.500 2.500
2012-11-27 06:00:00 2.625 2.375
2012-11-27 12:00:00 2.750 2.250
2012-11-27 18:00:00 2.875 2.125
2012-11-28 00:00:00 3.000 2.000
2012-11-28 06:00:00 3.125    NA
2012-11-28 12:00:00 3.250    NA
2012-11-28 18:00:00 3.375    NA
2012-11-29 00:00:00 3.500    NA
2012-11-29 06:00:00 3.625    NA
2012-11-29 12:00:00 3.750    NA
2012-11-29 18:00:00 3.875    NA
2012-11-30 00:00:00 4.000    NA
> as(na.spline(x[,,1], xout = xout), "xts")
                        1     2
2012-11-25 00:00:00 1.500 3.500
2012-11-25 06:00:00 1.625 3.375
2012-11-25 12:00:00 1.750 3.250
2012-11-25 18:00:00 1.875 3.125
2012-11-26 00:00:00 2.000 3.000
2012-11-26 06:00:00 2.125 2.875
2012-11-26 12:00:00 2.250 2.750
2012-11-26 18:00:00 2.375 2.625
2012-11-27 00:00:00 2.500 2.500
2012-11-27 06:00:00 2.625 2.375
2012-11-27 12:00:00 2.750 2.250
2012-11-27 18:00:00 2.875 2.125
2012-11-28 00:00:00 3.000 2.000
2012-11-28 06:00:00 3.125 1.875
2012-11-28 12:00:00 3.250 1.750
2012-11-28 18:00:00 3.375 1.625
2012-11-29 00:00:00 3.500 1.500
2012-11-29 06:00:00 3.625 1.375
2012-11-29 12:00:00 3.750 1.250
2012-11-29 18:00:00 3.875 1.125
2012-11-30 00:00:00 4.000 1.000
> as(na.spline(x[,,2], xout = xout), "xts")
                            1           2
2012-11-25 00:00:00  -4.00000  2.00000000
2012-11-25 06:00:00  -1.78125  3.19296875
2012-11-25 12:00:00   0.12500  3.88125000
2012-11-25 18:00:00   1.71875  4.12890625
2012-11-26 00:00:00   3.00000  4.00000000
2012-11-26 06:00:00   3.96875  3.55859375
2012-11-26 12:00:00   4.62500  2.86875000
2012-11-26 18:00:00   4.96875  1.99453125
2012-11-27 00:00:00   5.00000  1.00000000
2012-11-27 06:00:00   4.71875 -0.05078125
2012-11-27 12:00:00   4.12500 -1.09375000
2012-11-27 18:00:00   3.21875 -2.06484375
2012-11-28 00:00:00   2.00000 -2.90000000
2012-11-28 06:00:00   0.46875 -3.53515625
2012-11-28 12:00:00  -1.37500 -3.90625000
2012-11-28 18:00:00  -3.53125 -3.94921875
2012-11-29 00:00:00  -6.00000 -3.60000000
2012-11-29 06:00:00  -8.78125 -2.79453125
2012-11-29 12:00:00 -11.87500 -1.46875000
2012-11-29 18:00:00 -15.28125  0.44140625
2012-11-30 00:00:00 -19.00000  3.00000000
> 
> # larger/real data:
> data(air)
> # fill NA's with last non-NA
> r = na.locf(rural)
> # sample (NOT aggregate) to monthly:
> m = seq(start(rural), end(rural), "1 month")
> stplot(na.approx(rural[1:20,"2003:2005"], xout = m), mode = 'ts')
> 
> 
> 
> cleanEx()

detaching ‘package:sp’

> nameEx("stconstruct")
> ### * stconstruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stConstruct
> ### Title: create ST* objects from long or wide tables
> ### Aliases: stConstruct
> ### Keywords: manip
> 
> ### ** Examples
> 
> # example 0: construction of STFDF from long table:
> library(maps)
> states.m = map('state', plot=FALSE, fill=TRUE)
> IDs <- sapply(strsplit(states.m$names, ":"), function(x) x[1])
>  
> library(maptools)
Loading required package: sp
Checking rgeos availability: TRUE
> states = map2SpatialPolygons(states.m, IDs=IDs)
> 
> library(plm)
Loading required package: bdsmatrix

Attaching package: ‘bdsmatrix’

The following object is masked from ‘package:base’:

    backsolve

Loading required package: nlme
Loading required package: Formula
Loading required package: MASS
Loading required package: sandwich
Loading required package: zoo

Attaching package: ‘zoo’

The following object is masked from ‘package:base’:

    as.Date, as.Date.numeric

> data(Produc)
> 
> yrs = 1970:1986
> t = as.POSIXct(paste(yrs, "-01-01", sep=""), tz = "GMT")
> # deselect District of Columbia, polygon 8, which is not present in Produc:
> Produc.st = STFDF(states[-8], t, Produc[(order(Produc[,2], Produc[,1])),])
> 
> # example 1: st from long table, with states as Spatial object:
> # use Date format for time:
> Produc$time = as.Date(paste(yrs, "01", "01", sep = "-"))
> # take centroids of states:
> xy = coordinates(states[-8])
> Produc$x = xy[,1]
> Produc$y = xy[,2]
> #using stConstruct, use polygon centroids for location:
> x = stConstruct(Produc, c("x", "y"), "time", interval = TRUE)
> class(x)
[1] "STIDF"
attr(,"package")
[1] "spacetime"
> stplot(x[,,"unemp"])
> 
> # alternatively, pass states as SpatialObj:
> Produc$state = gsub("TENNESSE", "TENNESSEE", Produc$state)
> Produc$State = gsub("_", " ", tolower(Produc$state))
> x = stConstruct(Produc, "State", "time", states[-8])
> class(x)
[1] "STFDF"
attr(,"package")
[1] "spacetime"
> all.equal(x, Produc.st, check.attributes = FALSE)
[1] TRUE
> 
> # stConstruct multivariable, time-wide
> library(maptools)
> fname = system.file("shapes/sids.shp", package="maptools")[1]
> nc = readShapePoly(fname, proj4string=CRS("+proj=longlat +datum=NAD27"))
> timesList = list(
+ 	BIR=c("BIR74", "BIR79"),  # sets of variables that belong together
+ 	NWBIR=c("NWBIR74", "NWBIR79"), # only separated by space
+ 	SID=c("SID74", "SID79")
+ )
> t = as.Date(c("1974-01-01","1979-01-01"))
> nc.st = stConstruct(as(nc, "data.frame"), geometry(nc), timesList,
+ 	TimeObj = t, interval = TRUE)
> 
> # stConstruct multivariable, space-wide
> if (require(gstat)) {
+ data(wind)
+ wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))
+ wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))
+ coordinates(wind.loc) = ~x+y
+ proj4string(wind.loc) = "+proj=longlat +datum=WGS84"
+ 
+ # match station order to names in wide table:
+ stations = 4:15
+ wind.loc = wind.loc[match(names(wind[stations]), wind.loc$Code),]
+ row.names(wind.loc) = wind.loc$Station
+ # convert to utm zone 29, to be able to do interpolation in
+ # proper Euclidian (projected) space:
+ 
+ # create time variable
+ wind$time = ISOdate(wind$year+1900, wind$month, wind$day, 0)
+ 
+ w = STFDF(wind.loc, wind$time, 
+ 	data.frame(values = as.vector(t(wind[stations]))))
+ space = list(values = names(wind)[stations])
+ wind.st = stConstruct(wind[stations], space, wind$time, SpatialObj = wind.loc, interval = TRUE)
+ all.equal(w, wind.st)
+ class(wind.st)
+ }
Loading required package: gstat
[1] "STFDF"
attr(,"package")
[1] "spacetime"
> 
> 
> 
> cleanEx()

detaching ‘package:gstat’, ‘package:plm’, ‘package:sandwich’,
  ‘package:zoo’, ‘package:MASS’, ‘package:Formula’, ‘package:nlme’,
  ‘package:bdsmatrix’, ‘package:maptools’, ‘package:sp’, ‘package:maps’

> nameEx("stinteraction")
> ### * stinteraction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stInteraction
> ### Title: subtract marginal (spatial and temporal) means from observations
> ### Aliases: stInteraction
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> if (require(gstat)) {
+ library(sp)
+ data(wind)
+ wind.loc$y = as.numeric(char2dms(as.character(wind.loc[["Latitude"]])))
+ wind.loc$x = as.numeric(char2dms(as.character(wind.loc[["Longitude"]])))
+ coordinates(wind.loc) = ~x+y
+ proj4string(wind.loc) = "+proj=longlat +datum=WGS84"
+ # match station order to names in wide table:
+ stations = 4:15
+ wind.loc = wind.loc[match(names(wind[stations]), wind.loc$Code),]
+ row.names(wind.loc) = wind.loc$Station
+ wind$time = ISOdate(wind$year+1900, wind$month, wind$day, 0)
+ space = list(values = names(wind)[stations])
+ wind.st = stConstruct(wind[stations], space, wind$time, SpatialObj = wind.loc)
+ 
+ wind.sti = stInteraction(wind.st)
+ # temporal means for any station should be zero:
+ c(mean(wind.sti[3,]),
+ # spatial mean for each time step should be zero:
+ mean(wind.sti[,5][[1]]))
+ }
Loading required package: gstat
[1]  3.948633e-16 -8.141636e-16
> 
> 
> 
> 
> cleanEx()

detaching ‘package:sp’, ‘package:gstat’

> nameEx("tgrass")
> ### * tgrass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read.tgrass
> ### Title: read or write tgrass (time-enabled grass) files
> ### Aliases: read.tgrass write.tgrass
> ### Keywords: manip
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(spacetime)
> ##D r = read.tgrass("precipitation_1950_2011_yearly.tar.gz", useTempDir = FALSE)
> ##D write.tgrass(r, "myfile.tar.gz")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("timematch")
> ### * timematch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timeMatch
> ### Title: match two (time) sequences
> ### Aliases: timeMatch timeMatch,ST,ST-method timeMatch,xts,xts-method
> ###   timeMatch,POSIXct,POSIXct-method index MATCH
> ### Keywords: manip
> 
> ### ** Examples
> 
> t0 = as.POSIXct("1999-10-10")
> x = t0 +c(0.5+c(2,2.1,4),5)*3600
> y = t0 + 1:5 * 3600
> x
[1] "1999-10-10 02:30:00 GMT" "1999-10-10 02:36:00 GMT"
[3] "1999-10-10 04:30:00 GMT" "1999-10-10 05:00:00 GMT"
> y
[1] "1999-10-10 01:00:00 GMT" "1999-10-10 02:00:00 GMT"
[3] "1999-10-10 03:00:00 GMT" "1999-10-10 04:00:00 GMT"
[5] "1999-10-10 05:00:00 GMT"
> #timeIsInterval(x) = FALSE
> #timeIsInterval(y) = FALSE
> timeMatch(x,y, returnList = FALSE)
[1] NA NA NA  5
> timeMatch(x,y, returnList = TRUE)
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
integer(0)

[[4]]
[1] 5

> #timeIsInterval(y) = TRUE
> timeMatch(x,y, returnList = FALSE, end.y = delta(y))
[1] 2 2 4 5
> timeMatch(x,y, returnList = TRUE, end.y = delta(y))
[[1]]
[1] 2

[[2]]
[1] 2

[[3]]
[1] 4

[[4]]
[1] 5

> #timeIsInterval(x) = TRUE
> timeMatch(x,y, returnList = FALSE, end.x = delta(x), end.y = delta(y))
[1] 2 2 4 5
> timeMatch(x,y, returnList = TRUE, end.x = delta(x), end.y = delta(y))
[[1]]
[1] 2

[[2]]
[1] 2 3 4

[[3]]
[1] 4

[[4]]
[1] 5

> #timeIsInterval(y) = FALSE
> timeMatch(x,y, returnList = FALSE, end.x = delta(x))
[1] NA  3 NA  5
> timeMatch(x,y, returnList = TRUE, end.x = delta(x))
[[1]]
integer(0)

[[2]]
[1] 3 4

[[3]]
integer(0)

[[4]]
[1] 5

> 
> x = as.POSIXct("2000-01-01") + (0:9) * 3600
> y = x + 1
> y[1] = y[2]
> x
 [1] "2000-01-01 00:00:00 GMT" "2000-01-01 01:00:00 GMT"
 [3] "2000-01-01 02:00:00 GMT" "2000-01-01 03:00:00 GMT"
 [5] "2000-01-01 04:00:00 GMT" "2000-01-01 05:00:00 GMT"
 [7] "2000-01-01 06:00:00 GMT" "2000-01-01 07:00:00 GMT"
 [9] "2000-01-01 08:00:00 GMT" "2000-01-01 09:00:00 GMT"
> y
 [1] "2000-01-01 01:00:01 GMT" "2000-01-01 01:00:01 GMT"
 [3] "2000-01-01 02:00:01 GMT" "2000-01-01 03:00:01 GMT"
 [5] "2000-01-01 04:00:01 GMT" "2000-01-01 05:00:01 GMT"
 [7] "2000-01-01 06:00:01 GMT" "2000-01-01 07:00:01 GMT"
 [9] "2000-01-01 08:00:01 GMT" "2000-01-01 09:00:01 GMT"
> TI = function(x, ti) { 
+ 	timeIsInterval(x) = ti
+ 	x 
+ }
> #timeMatch(TI(y,FALSE),TI(y,FALSE))
> #timeMatch(TI(y,TRUE), TI(y,TRUE))
> #
> #timeMatch(TI(x,FALSE),TI(y,FALSE))
> #timeMatch(TI(x,FALSE),TI(y,TRUE))
> #timeMatch(TI(x,TRUE), TI(y,FALSE))
> #timeMatch(TI(x,TRUE), TI(y,TRUE))
> #
> #timeMatch(TI(x,FALSE),TI(y,FALSE), returnList = TRUE)
> #timeMatch(TI(x,FALSE),TI(y,TRUE), returnList = TRUE)
> #timeMatch(TI(x,TRUE), TI(y,FALSE), returnList = TRUE)
> #timeMatch(TI(x,TRUE), TI(y,TRUE), returnList = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("unstack")
> ### * unstack
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unstack
> ### Title: write STFDF to table forms
> ### Aliases: unstack.STFDF as.data.frame.STFDF
> ### Keywords: manip
> 
> ### ** Examples
> 
> sp = cbind(x = c(0,0,1), y = c(0,1,1))
> row.names(sp) = paste("point", 1:nrow(sp), sep="")
> library(sp)
> sp = SpatialPoints(sp)
> library(xts)
Loading required package: zoo

Attaching package: ‘zoo’

The following object is masked from ‘package:base’:

    as.Date, as.Date.numeric

> time = xts(1:4, as.POSIXct("2010-08-05")+3600*(10:13))
> m = c(10,20,30) # means for each of the 3 point locations
> mydata = rnorm(length(sp)*length(time),mean=rep(m, 4))
> IDs = paste("ID",1:length(mydata))
> mydata = data.frame(values = signif(mydata,3), ID=IDs)
> stfdf = STFDF(sp, time, mydata)
> as.data.frame(stfdf, row.names = IDs)
      x y  sp.ID                time             endTime timedata values    ID
ID 1  0 0 point1 2010-08-05 10:00:00 2010-08-05 11:00:00        1   9.37  ID 1
ID 2  0 1 point2 2010-08-05 10:00:00 2010-08-05 11:00:00        1  20.20  ID 2
ID 3  1 1 point3 2010-08-05 10:00:00 2010-08-05 11:00:00        1  29.20  ID 3
ID 4  0 0 point1 2010-08-05 11:00:00 2010-08-05 12:00:00        2  11.60  ID 4
ID 5  0 1 point2 2010-08-05 11:00:00 2010-08-05 12:00:00        2  20.30  ID 5
ID 6  1 1 point3 2010-08-05 11:00:00 2010-08-05 12:00:00        2  29.20  ID 6
ID 7  0 0 point1 2010-08-05 12:00:00 2010-08-05 13:00:00        3  10.50  ID 7
ID 8  0 1 point2 2010-08-05 12:00:00 2010-08-05 13:00:00        3  20.70  ID 8
ID 9  1 1 point3 2010-08-05 12:00:00 2010-08-05 13:00:00        3  30.60  ID 9
ID 10 0 0 point1 2010-08-05 13:00:00 2010-08-05 14:00:00        4   9.69 ID 10
ID 11 0 1 point2 2010-08-05 13:00:00 2010-08-05 14:00:00        4  21.50 ID 11
ID 12 1 1 point3 2010-08-05 13:00:00 2010-08-05 14:00:00        4  30.40 ID 12
> unstack(stfdf)
                    point1 point2 point3
2010-08-05 10:00:00   9.37   20.2   29.2
2010-08-05 11:00:00  11.60   20.3   29.2
2010-08-05 12:00:00  10.50   20.7   30.6
2010-08-05 13:00:00   9.69   21.5   30.4
> t(unstack(stfdf))
       2010-08-05 10:00:00 2010-08-05 11:00:00 2010-08-05 12:00:00
point1                9.37                11.6                10.5
point2               20.20                20.3                20.7
point3               29.20                29.2                30.6
       2010-08-05 13:00:00
point1                9.69
point2               21.50
point3               30.40
> unstack(stfdf, which = 2)
                    point1 point2 point3
2010-08-05 10:00:00   ID 1   ID 2   ID 3
2010-08-05 11:00:00   ID 4   ID 5   ID 6
2010-08-05 12:00:00   ID 7   ID 8   ID 9
2010-08-05 13:00:00  ID 10  ID 11  ID 12
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  9.672 0.236 9.939 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
